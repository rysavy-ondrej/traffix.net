using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Traffix.Core.Flows;

namespace Traffix.Data
{
    /// <summary>
    /// An interface that every conversation processor has to implement. 
    /// </summary>
    /// <typeparam name="T">The type of result generated by the conversation processor.</typeparam>
    public interface IConversationProcessor<T>
    {
        /// <summary>
        /// When applied to a flow and its frames, it creates the result of type <typeparamref name="T"/>.
        /// </summary>
        /// <param name="flowKey">The flow key.</param>
        /// <param name="frames">The collection of byte arrays that constains metadata and bytes of frames of the flow.</param>
        /// <returns>The result of type <typeparamref name="T"/> or <see langword="null"/>.</returns>
        T Invoke(FlowKey flowKey, ICollection<Memory<byte>> frames);
    }

    /// <summary>
    /// Provides some basic methods for supporting conversation processor operations.
    /// </summary>
    public static class ConversationProcessor
    {
        /// <summary>
        /// Gets packet bytes from the provided <paramref name="buffer"/> and copies the frame metadata to 
        /// <paramref name="frame"/> structure.
        /// <para/>
        /// This is a helper method that simplifies reconstructing a frame from the provided memory bytes.
        /// It provides an efficent way of accessng frames as it does not copy any data nor allocate memory.
        /// </summary>
        /// <param name="buffer">The input memory range with frame metadata and content.</param>
        /// <param name="frame">The reference to <see cref="FrameMetadata"/> to be populated with Frame metadata.</param>
        /// <returns>The method returns span to the provided  <paramref name="buffer"/> containing the frame bytes. 
        /// Note that its lifetime is the same as the lifetime of the <paramref name="buffer"/>. </returns>
        public static unsafe Span<byte> GetFrameFromMemory(Memory<byte> buffer, ref FrameMetadata frame)
        {
            FrameMetadata.ReadMetadata(buffer.Span, ref frame);
            return buffer.Span[Unsafe.SizeOf<FrameMetadata>()..];   // provide the rest of the memory as frame payload
        }
    }
}
