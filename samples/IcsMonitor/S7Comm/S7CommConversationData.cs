// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: S7CommConversationData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IcsMonitor.S7Comm {

  /// <summary>Holder for reflection information generated from S7CommConversationData.proto</summary>
  public static partial class S7CommConversationDataReflection {

    #region Descriptor
    /// <summary>File descriptor for S7CommConversationData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static S7CommConversationDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxTN0NvbW1Db252ZXJzYXRpb25EYXRhLnByb3RvEhFJY3NNb25pdG9yLlM3",
            "Q29tbSLSBAoWUzdDb21tQ29udmVyc2F0aW9uRGF0YRIWCg5wYXJhbUxlbmd0",
            "aFN1bRgBIAEoDRIVCg1kYXRhTGVuZ3RoU3VtGAIgASgNEhcKD2pvYlJlYWRW",
            "YXJDb3VudBgDIAEoDRIbChNqb2JSZWFkVmFySXRlbUNvdW50GAQgASgNEhcK",
            "D2Fja1JlYWRWYXJDb3VudBgFIAEoDRIeChZhY2tSZWFkVmFyU3VjY2Vzc0Nv",
            "dW50GAYgASgNEhgKEGpvYldyaXRlVmFyQ291bnQYByABKA0SHAoUam9iV3Jp",
            "dGVWYXJJdGVtQ291bnQYCCABKA0SGAoQYWNrV3JpdGVWYXJDb3VudBgJIAEo",
            "DRIcChRhY2tXcml0ZVN1Y2Nlc3NDb3VudBgKIAEoDRIWCg5qb2JVcGxvYWRD",
            "b3VudBgLIAEoDRIWCg5hY2tVcGxvYWRDb3VudBgMIAEoDRIYChBqb2JEb3du",
            "bG9hZENvdW50GA0gASgNEhgKEGFja0Rvd25sb2FkQ291bnQYDiABKA0SFwoP",
            "am9iQ29udHJvbENvdW50GA8gASgNEhcKD2Fja0NvbnRyb2xDb3VudBgQIAEo",
            "DRIcChRlcnJvckluUmVzcG9uc2VDb3VudBgRIAEoDRIcChR1c2VyRGF0YVJl",
            "cXVlc3RDb3VudBgSIAEoDRIdChV1c2VyRGF0YVJlc3BvbnNlQ291bnQYEyAB",
            "KA0SGwoTdW5rbm93blJlcXVlc3RDb3VudBgUIAEoDRIcChR1bmtub3duUmVz",
            "cG9uc2VDb3VudBgVIAEoDUIUqgIRSWNzTW9uaXRvci5TN0NvbW1iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IcsMonitor.S7Comm.S7CommConversationData), global::IcsMonitor.S7Comm.S7CommConversationData.Parser, new[]{ "ParamLengthSum", "DataLengthSum", "JobReadVarCount", "JobReadVarItemCount", "AckReadVarCount", "AckReadVarSuccessCount", "JobWriteVarCount", "JobWriteVarItemCount", "AckWriteVarCount", "AckWriteSuccessCount", "JobUploadCount", "AckUploadCount", "JobDownloadCount", "AckDownloadCount", "JobControlCount", "AckControlCount", "ErrorInResponseCount", "UserDataRequestCount", "UserDataResponseCount", "UnknownRequestCount", "UnknownResponseCount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class S7CommConversationData : pb::IMessage<S7CommConversationData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<S7CommConversationData> _parser = new pb::MessageParser<S7CommConversationData>(() => new S7CommConversationData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S7CommConversationData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IcsMonitor.S7Comm.S7CommConversationDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S7CommConversationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S7CommConversationData(S7CommConversationData other) : this() {
      paramLengthSum_ = other.paramLengthSum_;
      dataLengthSum_ = other.dataLengthSum_;
      jobReadVarCount_ = other.jobReadVarCount_;
      jobReadVarItemCount_ = other.jobReadVarItemCount_;
      ackReadVarCount_ = other.ackReadVarCount_;
      ackReadVarSuccessCount_ = other.ackReadVarSuccessCount_;
      jobWriteVarCount_ = other.jobWriteVarCount_;
      jobWriteVarItemCount_ = other.jobWriteVarItemCount_;
      ackWriteVarCount_ = other.ackWriteVarCount_;
      ackWriteSuccessCount_ = other.ackWriteSuccessCount_;
      jobUploadCount_ = other.jobUploadCount_;
      ackUploadCount_ = other.ackUploadCount_;
      jobDownloadCount_ = other.jobDownloadCount_;
      ackDownloadCount_ = other.ackDownloadCount_;
      jobControlCount_ = other.jobControlCount_;
      ackControlCount_ = other.ackControlCount_;
      errorInResponseCount_ = other.errorInResponseCount_;
      userDataRequestCount_ = other.userDataRequestCount_;
      userDataResponseCount_ = other.userDataResponseCount_;
      unknownRequestCount_ = other.unknownRequestCount_;
      unknownResponseCount_ = other.unknownResponseCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S7CommConversationData Clone() {
      return new S7CommConversationData(this);
    }

    /// <summary>Field number for the "paramLengthSum" field.</summary>
    public const int ParamLengthSumFieldNumber = 1;
    private uint paramLengthSum_;
    /// <summary>
    ///	Sum of all parameter lengths presented in the header.	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParamLengthSum {
      get { return paramLengthSum_; }
      set {
        paramLengthSum_ = value;
      }
    }

    /// <summary>Field number for the "dataLengthSum" field.</summary>
    public const int DataLengthSumFieldNumber = 2;
    private uint dataLengthSum_;
    /// <summary>
    ///	Sum of all data lengths presented in the header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataLengthSum {
      get { return dataLengthSum_; }
      set {
        dataLengthSum_ = value;
      }
    }

    /// <summary>Field number for the "jobReadVarCount" field.</summary>
    public const int JobReadVarCountFieldNumber = 3;
    private uint jobReadVarCount_;
    /// <summary>
    ///	Count of Job Read Var requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JobReadVarCount {
      get { return jobReadVarCount_; }
      set {
        jobReadVarCount_ = value;
      }
    }

    /// <summary>Field number for the "jobReadVarItemCount" field.</summary>
    public const int JobReadVarItemCountFieldNumber = 4;
    private uint jobReadVarItemCount_;
    /// <summary>
    ///	Count of items in Job Read Var requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JobReadVarItemCount {
      get { return jobReadVarItemCount_; }
      set {
        jobReadVarItemCount_ = value;
      }
    }

    /// <summary>Field number for the "ackReadVarCount" field.</summary>
    public const int AckReadVarCountFieldNumber = 5;
    private uint ackReadVarCount_;
    /// <summary>
    ///	Count of Ack Data Read Var responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AckReadVarCount {
      get { return ackReadVarCount_; }
      set {
        ackReadVarCount_ = value;
      }
    }

    /// <summary>Field number for the "ackReadVarSuccessCount" field.</summary>
    public const int AckReadVarSuccessCountFieldNumber = 6;
    private uint ackReadVarSuccessCount_;
    /// <summary>
    ///	Count of success items in Ack Data Read Var responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AckReadVarSuccessCount {
      get { return ackReadVarSuccessCount_; }
      set {
        ackReadVarSuccessCount_ = value;
      }
    }

    /// <summary>Field number for the "jobWriteVarCount" field.</summary>
    public const int JobWriteVarCountFieldNumber = 7;
    private uint jobWriteVarCount_;
    /// <summary>
    ///	Count of Job Write Var requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JobWriteVarCount {
      get { return jobWriteVarCount_; }
      set {
        jobWriteVarCount_ = value;
      }
    }

    /// <summary>Field number for the "jobWriteVarItemCount" field.</summary>
    public const int JobWriteVarItemCountFieldNumber = 8;
    private uint jobWriteVarItemCount_;
    /// <summary>
    ///	Count of items in Job Write Var requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JobWriteVarItemCount {
      get { return jobWriteVarItemCount_; }
      set {
        jobWriteVarItemCount_ = value;
      }
    }

    /// <summary>Field number for the "ackWriteVarCount" field.</summary>
    public const int AckWriteVarCountFieldNumber = 9;
    private uint ackWriteVarCount_;
    /// <summary>
    ///	Count of Ack Data Write Var responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AckWriteVarCount {
      get { return ackWriteVarCount_; }
      set {
        ackWriteVarCount_ = value;
      }
    }

    /// <summary>Field number for the "ackWriteSuccessCount" field.</summary>
    public const int AckWriteSuccessCountFieldNumber = 10;
    private uint ackWriteSuccessCount_;
    /// <summary>
    ///	Count of success items in Ack Data Write Var responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AckWriteSuccessCount {
      get { return ackWriteSuccessCount_; }
      set {
        ackWriteSuccessCount_ = value;
      }
    }

    /// <summary>Field number for the "jobUploadCount" field.</summary>
    public const int JobUploadCountFieldNumber = 11;
    private uint jobUploadCount_;
    /// <summary>
    ///	Count of upload job request messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JobUploadCount {
      get { return jobUploadCount_; }
      set {
        jobUploadCount_ = value;
      }
    }

    /// <summary>Field number for the "ackUploadCount" field.</summary>
    public const int AckUploadCountFieldNumber = 12;
    private uint ackUploadCount_;
    /// <summary>
    ///	Count of upload job messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AckUploadCount {
      get { return ackUploadCount_; }
      set {
        ackUploadCount_ = value;
      }
    }

    /// <summary>Field number for the "jobDownloadCount" field.</summary>
    public const int JobDownloadCountFieldNumber = 13;
    private uint jobDownloadCount_;
    /// <summary>
    ///	Count of download job messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JobDownloadCount {
      get { return jobDownloadCount_; }
      set {
        jobDownloadCount_ = value;
      }
    }

    /// <summary>Field number for the "ackDownloadCount" field.</summary>
    public const int AckDownloadCountFieldNumber = 14;
    private uint ackDownloadCount_;
    /// <summary>
    ///	Count of upload job messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AckDownloadCount {
      get { return ackDownloadCount_; }
      set {
        ackDownloadCount_ = value;
      }
    }

    /// <summary>Field number for the "jobControlCount" field.</summary>
    public const int JobControlCountFieldNumber = 15;
    private uint jobControlCount_;
    /// <summary>
    ///	Count of PLC control messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JobControlCount {
      get { return jobControlCount_; }
      set {
        jobControlCount_ = value;
      }
    }

    /// <summary>Field number for the "ackControlCount" field.</summary>
    public const int AckControlCountFieldNumber = 16;
    private uint ackControlCount_;
    /// <summary>
    ///	Count of upload job messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AckControlCount {
      get { return ackControlCount_; }
      set {
        ackControlCount_ = value;
      }
    }

    /// <summary>Field number for the "errorInResponseCount" field.</summary>
    public const int ErrorInResponseCountFieldNumber = 17;
    private uint errorInResponseCount_;
    /// <summary>
    ///	Count of responses that report some error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorInResponseCount {
      get { return errorInResponseCount_; }
      set {
        errorInResponseCount_ = value;
      }
    }

    /// <summary>Field number for the "userDataRequestCount" field.</summary>
    public const int UserDataRequestCountFieldNumber = 18;
    private uint userDataRequestCount_;
    /// <summary>
    ///	Count of user data request messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserDataRequestCount {
      get { return userDataRequestCount_; }
      set {
        userDataRequestCount_ = value;
      }
    }

    /// <summary>Field number for the "userDataResponseCount" field.</summary>
    public const int UserDataResponseCountFieldNumber = 19;
    private uint userDataResponseCount_;
    /// <summary>
    ///	Count of user data response messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserDataResponseCount {
      get { return userDataResponseCount_; }
      set {
        userDataResponseCount_ = value;
      }
    }

    /// <summary>Field number for the "unknownRequestCount" field.</summary>
    public const int UnknownRequestCountFieldNumber = 20;
    private uint unknownRequestCount_;
    /// <summary>
    ///	Count of requests with unknow message type or function code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnknownRequestCount {
      get { return unknownRequestCount_; }
      set {
        unknownRequestCount_ = value;
      }
    }

    /// <summary>Field number for the "unknownResponseCount" field.</summary>
    public const int UnknownResponseCountFieldNumber = 21;
    private uint unknownResponseCount_;
    /// <summary>
    ///	Count of responses with unknow message type or function code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnknownResponseCount {
      get { return unknownResponseCount_; }
      set {
        unknownResponseCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S7CommConversationData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S7CommConversationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParamLengthSum != other.ParamLengthSum) return false;
      if (DataLengthSum != other.DataLengthSum) return false;
      if (JobReadVarCount != other.JobReadVarCount) return false;
      if (JobReadVarItemCount != other.JobReadVarItemCount) return false;
      if (AckReadVarCount != other.AckReadVarCount) return false;
      if (AckReadVarSuccessCount != other.AckReadVarSuccessCount) return false;
      if (JobWriteVarCount != other.JobWriteVarCount) return false;
      if (JobWriteVarItemCount != other.JobWriteVarItemCount) return false;
      if (AckWriteVarCount != other.AckWriteVarCount) return false;
      if (AckWriteSuccessCount != other.AckWriteSuccessCount) return false;
      if (JobUploadCount != other.JobUploadCount) return false;
      if (AckUploadCount != other.AckUploadCount) return false;
      if (JobDownloadCount != other.JobDownloadCount) return false;
      if (AckDownloadCount != other.AckDownloadCount) return false;
      if (JobControlCount != other.JobControlCount) return false;
      if (AckControlCount != other.AckControlCount) return false;
      if (ErrorInResponseCount != other.ErrorInResponseCount) return false;
      if (UserDataRequestCount != other.UserDataRequestCount) return false;
      if (UserDataResponseCount != other.UserDataResponseCount) return false;
      if (UnknownRequestCount != other.UnknownRequestCount) return false;
      if (UnknownResponseCount != other.UnknownResponseCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParamLengthSum != 0) hash ^= ParamLengthSum.GetHashCode();
      if (DataLengthSum != 0) hash ^= DataLengthSum.GetHashCode();
      if (JobReadVarCount != 0) hash ^= JobReadVarCount.GetHashCode();
      if (JobReadVarItemCount != 0) hash ^= JobReadVarItemCount.GetHashCode();
      if (AckReadVarCount != 0) hash ^= AckReadVarCount.GetHashCode();
      if (AckReadVarSuccessCount != 0) hash ^= AckReadVarSuccessCount.GetHashCode();
      if (JobWriteVarCount != 0) hash ^= JobWriteVarCount.GetHashCode();
      if (JobWriteVarItemCount != 0) hash ^= JobWriteVarItemCount.GetHashCode();
      if (AckWriteVarCount != 0) hash ^= AckWriteVarCount.GetHashCode();
      if (AckWriteSuccessCount != 0) hash ^= AckWriteSuccessCount.GetHashCode();
      if (JobUploadCount != 0) hash ^= JobUploadCount.GetHashCode();
      if (AckUploadCount != 0) hash ^= AckUploadCount.GetHashCode();
      if (JobDownloadCount != 0) hash ^= JobDownloadCount.GetHashCode();
      if (AckDownloadCount != 0) hash ^= AckDownloadCount.GetHashCode();
      if (JobControlCount != 0) hash ^= JobControlCount.GetHashCode();
      if (AckControlCount != 0) hash ^= AckControlCount.GetHashCode();
      if (ErrorInResponseCount != 0) hash ^= ErrorInResponseCount.GetHashCode();
      if (UserDataRequestCount != 0) hash ^= UserDataRequestCount.GetHashCode();
      if (UserDataResponseCount != 0) hash ^= UserDataResponseCount.GetHashCode();
      if (UnknownRequestCount != 0) hash ^= UnknownRequestCount.GetHashCode();
      if (UnknownResponseCount != 0) hash ^= UnknownResponseCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ParamLengthSum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ParamLengthSum);
      }
      if (DataLengthSum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DataLengthSum);
      }
      if (JobReadVarCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(JobReadVarCount);
      }
      if (JobReadVarItemCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(JobReadVarItemCount);
      }
      if (AckReadVarCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AckReadVarCount);
      }
      if (AckReadVarSuccessCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AckReadVarSuccessCount);
      }
      if (JobWriteVarCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(JobWriteVarCount);
      }
      if (JobWriteVarItemCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(JobWriteVarItemCount);
      }
      if (AckWriteVarCount != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AckWriteVarCount);
      }
      if (AckWriteSuccessCount != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(AckWriteSuccessCount);
      }
      if (JobUploadCount != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(JobUploadCount);
      }
      if (AckUploadCount != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(AckUploadCount);
      }
      if (JobDownloadCount != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(JobDownloadCount);
      }
      if (AckDownloadCount != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(AckDownloadCount);
      }
      if (JobControlCount != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(JobControlCount);
      }
      if (AckControlCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(AckControlCount);
      }
      if (ErrorInResponseCount != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ErrorInResponseCount);
      }
      if (UserDataRequestCount != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(UserDataRequestCount);
      }
      if (UserDataResponseCount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(UserDataResponseCount);
      }
      if (UnknownRequestCount != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(UnknownRequestCount);
      }
      if (UnknownResponseCount != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(UnknownResponseCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ParamLengthSum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ParamLengthSum);
      }
      if (DataLengthSum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DataLengthSum);
      }
      if (JobReadVarCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(JobReadVarCount);
      }
      if (JobReadVarItemCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(JobReadVarItemCount);
      }
      if (AckReadVarCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AckReadVarCount);
      }
      if (AckReadVarSuccessCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AckReadVarSuccessCount);
      }
      if (JobWriteVarCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(JobWriteVarCount);
      }
      if (JobWriteVarItemCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(JobWriteVarItemCount);
      }
      if (AckWriteVarCount != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AckWriteVarCount);
      }
      if (AckWriteSuccessCount != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(AckWriteSuccessCount);
      }
      if (JobUploadCount != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(JobUploadCount);
      }
      if (AckUploadCount != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(AckUploadCount);
      }
      if (JobDownloadCount != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(JobDownloadCount);
      }
      if (AckDownloadCount != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(AckDownloadCount);
      }
      if (JobControlCount != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(JobControlCount);
      }
      if (AckControlCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(AckControlCount);
      }
      if (ErrorInResponseCount != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ErrorInResponseCount);
      }
      if (UserDataRequestCount != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(UserDataRequestCount);
      }
      if (UserDataResponseCount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(UserDataResponseCount);
      }
      if (UnknownRequestCount != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(UnknownRequestCount);
      }
      if (UnknownResponseCount != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(UnknownResponseCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParamLengthSum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParamLengthSum);
      }
      if (DataLengthSum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataLengthSum);
      }
      if (JobReadVarCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JobReadVarCount);
      }
      if (JobReadVarItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JobReadVarItemCount);
      }
      if (AckReadVarCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckReadVarCount);
      }
      if (AckReadVarSuccessCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckReadVarSuccessCount);
      }
      if (JobWriteVarCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JobWriteVarCount);
      }
      if (JobWriteVarItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JobWriteVarItemCount);
      }
      if (AckWriteVarCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckWriteVarCount);
      }
      if (AckWriteSuccessCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckWriteSuccessCount);
      }
      if (JobUploadCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JobUploadCount);
      }
      if (AckUploadCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckUploadCount);
      }
      if (JobDownloadCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JobDownloadCount);
      }
      if (AckDownloadCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckDownloadCount);
      }
      if (JobControlCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JobControlCount);
      }
      if (AckControlCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AckControlCount);
      }
      if (ErrorInResponseCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ErrorInResponseCount);
      }
      if (UserDataRequestCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserDataRequestCount);
      }
      if (UserDataResponseCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserDataResponseCount);
      }
      if (UnknownRequestCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnknownRequestCount);
      }
      if (UnknownResponseCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnknownResponseCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S7CommConversationData other) {
      if (other == null) {
        return;
      }
      if (other.ParamLengthSum != 0) {
        ParamLengthSum = other.ParamLengthSum;
      }
      if (other.DataLengthSum != 0) {
        DataLengthSum = other.DataLengthSum;
      }
      if (other.JobReadVarCount != 0) {
        JobReadVarCount = other.JobReadVarCount;
      }
      if (other.JobReadVarItemCount != 0) {
        JobReadVarItemCount = other.JobReadVarItemCount;
      }
      if (other.AckReadVarCount != 0) {
        AckReadVarCount = other.AckReadVarCount;
      }
      if (other.AckReadVarSuccessCount != 0) {
        AckReadVarSuccessCount = other.AckReadVarSuccessCount;
      }
      if (other.JobWriteVarCount != 0) {
        JobWriteVarCount = other.JobWriteVarCount;
      }
      if (other.JobWriteVarItemCount != 0) {
        JobWriteVarItemCount = other.JobWriteVarItemCount;
      }
      if (other.AckWriteVarCount != 0) {
        AckWriteVarCount = other.AckWriteVarCount;
      }
      if (other.AckWriteSuccessCount != 0) {
        AckWriteSuccessCount = other.AckWriteSuccessCount;
      }
      if (other.JobUploadCount != 0) {
        JobUploadCount = other.JobUploadCount;
      }
      if (other.AckUploadCount != 0) {
        AckUploadCount = other.AckUploadCount;
      }
      if (other.JobDownloadCount != 0) {
        JobDownloadCount = other.JobDownloadCount;
      }
      if (other.AckDownloadCount != 0) {
        AckDownloadCount = other.AckDownloadCount;
      }
      if (other.JobControlCount != 0) {
        JobControlCount = other.JobControlCount;
      }
      if (other.AckControlCount != 0) {
        AckControlCount = other.AckControlCount;
      }
      if (other.ErrorInResponseCount != 0) {
        ErrorInResponseCount = other.ErrorInResponseCount;
      }
      if (other.UserDataRequestCount != 0) {
        UserDataRequestCount = other.UserDataRequestCount;
      }
      if (other.UserDataResponseCount != 0) {
        UserDataResponseCount = other.UserDataResponseCount;
      }
      if (other.UnknownRequestCount != 0) {
        UnknownRequestCount = other.UnknownRequestCount;
      }
      if (other.UnknownResponseCount != 0) {
        UnknownResponseCount = other.UnknownResponseCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ParamLengthSum = input.ReadUInt32();
            break;
          }
          case 16: {
            DataLengthSum = input.ReadUInt32();
            break;
          }
          case 24: {
            JobReadVarCount = input.ReadUInt32();
            break;
          }
          case 32: {
            JobReadVarItemCount = input.ReadUInt32();
            break;
          }
          case 40: {
            AckReadVarCount = input.ReadUInt32();
            break;
          }
          case 48: {
            AckReadVarSuccessCount = input.ReadUInt32();
            break;
          }
          case 56: {
            JobWriteVarCount = input.ReadUInt32();
            break;
          }
          case 64: {
            JobWriteVarItemCount = input.ReadUInt32();
            break;
          }
          case 72: {
            AckWriteVarCount = input.ReadUInt32();
            break;
          }
          case 80: {
            AckWriteSuccessCount = input.ReadUInt32();
            break;
          }
          case 88: {
            JobUploadCount = input.ReadUInt32();
            break;
          }
          case 96: {
            AckUploadCount = input.ReadUInt32();
            break;
          }
          case 104: {
            JobDownloadCount = input.ReadUInt32();
            break;
          }
          case 112: {
            AckDownloadCount = input.ReadUInt32();
            break;
          }
          case 120: {
            JobControlCount = input.ReadUInt32();
            break;
          }
          case 128: {
            AckControlCount = input.ReadUInt32();
            break;
          }
          case 136: {
            ErrorInResponseCount = input.ReadUInt32();
            break;
          }
          case 144: {
            UserDataRequestCount = input.ReadUInt32();
            break;
          }
          case 152: {
            UserDataResponseCount = input.ReadUInt32();
            break;
          }
          case 160: {
            UnknownRequestCount = input.ReadUInt32();
            break;
          }
          case 168: {
            UnknownResponseCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ParamLengthSum = input.ReadUInt32();
            break;
          }
          case 16: {
            DataLengthSum = input.ReadUInt32();
            break;
          }
          case 24: {
            JobReadVarCount = input.ReadUInt32();
            break;
          }
          case 32: {
            JobReadVarItemCount = input.ReadUInt32();
            break;
          }
          case 40: {
            AckReadVarCount = input.ReadUInt32();
            break;
          }
          case 48: {
            AckReadVarSuccessCount = input.ReadUInt32();
            break;
          }
          case 56: {
            JobWriteVarCount = input.ReadUInt32();
            break;
          }
          case 64: {
            JobWriteVarItemCount = input.ReadUInt32();
            break;
          }
          case 72: {
            AckWriteVarCount = input.ReadUInt32();
            break;
          }
          case 80: {
            AckWriteSuccessCount = input.ReadUInt32();
            break;
          }
          case 88: {
            JobUploadCount = input.ReadUInt32();
            break;
          }
          case 96: {
            AckUploadCount = input.ReadUInt32();
            break;
          }
          case 104: {
            JobDownloadCount = input.ReadUInt32();
            break;
          }
          case 112: {
            AckDownloadCount = input.ReadUInt32();
            break;
          }
          case 120: {
            JobControlCount = input.ReadUInt32();
            break;
          }
          case 128: {
            AckControlCount = input.ReadUInt32();
            break;
          }
          case 136: {
            ErrorInResponseCount = input.ReadUInt32();
            break;
          }
          case 144: {
            UserDataRequestCount = input.ReadUInt32();
            break;
          }
          case 152: {
            UserDataResponseCount = input.ReadUInt32();
            break;
          }
          case 160: {
            UnknownRequestCount = input.ReadUInt32();
            break;
          }
          case 168: {
            UnknownResponseCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
